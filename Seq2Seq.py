# -*- coding: utf-8 -*-
"""10-Chatbot(Rewritten).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tUozLGIyD4AyMLUsE9YtSgPtZOO1Rqkh

# Banking Bot

**Getting data from local Machine**
"""


import numpy as np

from keras.models import Model
from keras.layers import GRU, Embedding, Dense, Input,LSTM,Bidirectional,CuDNNGRU
from keras.optimizers import RMSprop
from keras.callbacks import EarlyStopping, ModelCheckpoint ,TensorBoard
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

mark_start = 'ssss '
mark_end = ' eeee'



# import europarl
def load_data(path,answers):
    with open(f'{path}' , 'r' ,encoding="utf-8") as file:
        if answers:
            data =[mark_start + sentences.strip('.') + mark_end for sentences in file]
        else:
            data =[ sentences.strip('\n') for sentences in file]
    return data

data_src = load_data('Questions',False)

data_src[:10]

data_target = load_data('Answers',True)

data_target[:10]

"""## Example data"""

idx = 2

data_src[idx]

mark_start + data_target[idx] + mark_end

num_words = 4616

class TokenizerWrap(Tokenizer):
    """Wrap the Tokenizer-class from Keras with more functionality."""
    
    def __init__(self, texts, padding,
                 reverse=False, num_words=None):
        """
        :param texts: List of strings. This is the data-set.
        :param padding: Either 'post' or 'pre' padding.
        :param reverse: Boolean whether to reverse token-lists.
        :param num_words: Max number of words to use.
        """

        Tokenizer.__init__(self, num_words=num_words)

        # Create the vocabulary from the texts.
        self.fit_on_texts(texts)

        # Create inverse lookup from integer-tokens to words.
        self.index_to_word = dict(zip(self.word_index.values(),
                                      self.word_index.keys()))

        # Convert all texts to lists of integer-tokens.
        # Note that the sequences may have different lengths.
        self.tokens = self.texts_to_sequences(texts)

        if reverse:
            # Reverse the token-sequences.
            self.tokens = [list(reversed(x)) for x in self.tokens]
        
            # Sequences that are too long should now be truncated
            # at the beginning, which corresponds to the end of
            # the original sequences.
            truncating = 'pre'
        else:
            # Sequences that are too long should be truncated
            # at the end.
            truncating = 'post'

        # The number of integer-tokens in each sequence.
        self.num_tokens = [len(x) for x in self.tokens]

        # Max number of tokens to use in all sequences.
        # We will pad / truncate all sequences to this length.
        # This is a compromise so we save a lot of memory and
        # only have to truncate maybe 5% of all the sequences.
        self.max_tokens = np.mean(self.num_tokens) \
                          + 2 * np.std(self.num_tokens)
        self.max_tokens = int(self.max_tokens)

        # Pad / truncate all token-sequences to the given length.
        # This creates a 2-dim numpy matrix that is easier to use.
        self.tokens_padded = pad_sequences(self.tokens,
                                           maxlen=self.max_tokens,
                                           padding=padding,
                                           truncating=truncating)

    def token_to_word(self, token):
        """Lookup a single word from an integer-token."""

        word = " " if token == 0 else self.index_to_word[token]
        return word 

    def tokens_to_string(self, tokens):
        """Convert a list of integer-tokens to a string."""

        # Create a list of the individual words.
        words = [self.index_to_word[token]
                 for token in tokens
                 if token != 0]
        
        # Concatenate the words to a single string
        # with space between all the words.
        text = " ".join(words)

        return text
    
    def text_to_tokens(self, text, reverse=False, padding=False):
        """
        Convert a single text-string to tokens with optional
        reversal and padding.
        """

        # Convert to tokens. Note that we assume there is only
        # a single text-string so we wrap it in a list.
        tokens = self.texts_to_sequences([text])
        tokens = np.array(tokens)

        if reverse:
            # Reverse the tokens.
            tokens = np.flip(tokens, axis=1)

            # Sequences that are too long should now be truncated
            # at the beginning, which corresponds to the end of
            # the original sequences.
            truncating = 'pre'
        else:
            # Sequences that are too long should be truncated
            # at the end.
            truncating = 'post'

        if padding:
            # Pad and truncate sequences to the given length.
            tokens = pad_sequences(tokens,
                                   maxlen=self.max_tokens,
                                   padding='pre',
                                   truncating=truncating)

        return tokens


tokenizer_src = TokenizerWrap(texts=data_src,
                              padding='pre',
                              reverse=True,
                              num_words=num_words)

tokenizer_dest = TokenizerWrap(texts=data_target,
                               padding='post',
                               reverse=False,
                               num_words=num_words)

tokens_src = tokenizer_src.tokens_padded
tokens_dest = tokenizer_dest.tokens_padded
print(tokens_src.shape)
print(tokens_dest.shape)

tokens_src[6]

tokenizer_src.tokens_to_string(tokens_src[6])

tokens_dest[6]

tokenizer_dest.tokens_to_string(tokens_dest[5])

token_start = tokenizer_dest.word_index[mark_start.strip()]
token_start

token_end = tokenizer_dest.word_index[mark_end.strip()]
token_end

"""## Training Data"""

encoder_input_data = tokens_src
decoder_input_data = tokens_dest[:, :-1]
decoder_input_data.shape

"""* The input and output data for the decoder is identical, except shifted one time-step. We can use the same numpy array to save memory by slicing it, which merely creates different 'views' of the same data in memory."""

decoder_output_data = tokens_dest[:,1:]

decoder_output_data.shape

decoder_input_data[idx]

decoder_output_data[idx]

tokenizer_dest.tokens_to_string(decoder_input_data[idx])

tokenizer_dest.tokens_to_string(decoder_output_data[idx])

max_words_decoder = len(tokenizer_dest.word_index)

"""## Creating Neural Network

* First we create the encoder-part of the neural network which maps a sequence of integer-tokens to a "thought vector".
"""

encoder_input = Input(shape=(None,),name='encoder_input')

embedding_size = 200

encoder_embedding = Embedding(input_dim=num_words,
                              output_dim=embedding_size,
                              name='encoder_embedding')

state_size = 512

encoder_gru1 =GRU(state_size, name='encoder_gru1',
                   return_sequences=True)
encoder_gru2 = GRU(state_size, name='encoder_gru2',
                   return_sequences=True)
encoder_gru3 = GRU(state_size, name='encoder_gru3',
                   return_sequences=False)

"""* This helper-function connects all the layers of the encoder."""

def connect_encoder():
    # Start the neural network with its input-layer.
    net = encoder_input
    
    # Connect the embedding-layer.
    net = encoder_embedding(net)

    # Connect all the GRU-layers.
    net = encoder_gru1(net)
    net = encoder_gru2(net)
    net = encoder_gru3(net)

    # This is the output of the encoder.
    encoder_output = net
    
    return encoder_output

encoder_output = connect_encoder()

"""## Create the Decoder

* Create the decoder-part which maps the "thought vector" to a sequence of integer-tokens.

* The decoder takes two inputs. First it needs the "thought vector" produced by the encoder which summarizes the contents of the input-text.
"""

decoder_initial_state = Input(shape=(state_size,),
                              name='decoder_initial_state')

"""* The decoder also needs a sequence of integer-tokens as inputs. During training we will supply this with a full sequence of integer-tokens e.g. corresponding to the text "ssss once upon a time eeee"."""

decoder_input = Input(shape=(None, ), name='decoder_input')

decoder_embedding = Embedding(input_dim=num_words,
                              output_dim=embedding_size,
                              name='decoder_embedding')

decoder_gru1 =GRU(state_size, name='decoder_gru1',
                   return_sequences=True)
decoder_gru2 = GRU(state_size, name='decoder_gru2',
                   return_sequences=True)
decoder_gru3 =GRU(state_size, name='decoder_gru3',
                   return_sequences=True)

decoder_dense = Dense(max_words_decoder,
                      activation='softmax',
                      name='decoder_output')

def connect_decoder(initial_state):
    # Start the decoder-network with its input-layer.
    net = decoder_input

    # Connect the embedding-layer.
    net = decoder_embedding(net)
    
    # Connect all the GRU-layers.
    net = decoder_gru1(net, initial_state=initial_state)
    net = decoder_gru2(net, initial_state=initial_state)
    net = decoder_gru3(net, initial_state=initial_state)

    # Connect the final dense layer that converts to
    # one-hot encoded arrays.
    decoder_output = decoder_dense(net)
    
    return decoder_output

"""## Connecting and creating model"""

decoder_output = connect_decoder(initial_state=encoder_output)

model_train = Model(inputs=[encoder_input, decoder_input],
                    outputs=[decoder_output])

model_encoder = Model(inputs=[encoder_input],
                      outputs=[encoder_output])

decoder_output = connect_decoder(initial_state=decoder_initial_state)

model_decoder = Model(inputs=[decoder_input, decoder_initial_state],
                      outputs=[decoder_output])

model_train.summary()

optimizer = RMSprop(lr=1e-3)

model_train.compile(optimizer=optimizer,
                    loss='categorical_crossentropy')

"""## Train the Model
* We wrap the data in named dicts so we are sure the data is assigned correctly to the inputs and outputs of the model.
"""

# encoder_input_data = encoder_input_data[1:13000]
# decoder_input_data = decoder_input_data[1:13000]
# decoder_output_data = decoder_output_data[1:13000]

x_data = \
{
    'encoder_input': encoder_input_data,
    'decoder_input': decoder_input_data
}

from keras.utils import to_categorical
decoder_output_data = to_categorical(decoder_output_data)

decoder_output_data.shape

y_data = \
{
    'decoder_output': decoder_output_data
}

"""## Validation split"""

validation_split = 0.12

epochs = 250

model_train.fit(x=x_data,
                y=y_data,
                batch_size=128,
                epochs=epochs,
                validation_split=validation_split)

# model_train.save(f'bot{epochs}.h5')

"""## Translate Texts
* This function translates a text from the source-language to the destination-language and optionally prints a true translation.
"""

def translate(input_text, true_output_text=None):
    """Translate a single text-string."""

    # Convert the input-text to integer-tokens.
    # Note the sequence of tokens has to be reversed.
    # Padding is probably not necessary.
    input_tokens = tokenizer_src.text_to_tokens(text=input_text,
                                                reverse=True,
                                                padding=True)
    print(input_tokens)
    
    # Get the output of the encoder's GRU which will be
    # used as the initial state in the decoder's GRU.
    # This could also have been the encoder's final state
    # but that is really only necessary if the encoder
    # and decoder use the LSTM instead of GRU because
    # the LSTM has two internal states.
    initial_state = model_encoder.predict(input_tokens)
    # print(f'inital_state : {initial_state}')

    # Max number of tokens / words in the output sequence.
    max_tokens = tokenizer_dest.max_tokens

    # Pre-allocate the 2-dim array used as input to the decoder.
    # This holds just a single sequence of integer-tokens,
    # but the decoder-model expects a batch of sequences.
    shape = (1, max_tokens)
    decoder_input_data = np.zeros(shape=shape, dtype=np.int)

    # The first input-token is the special start-token for 'ssss '.
    token_int = token_start

    # Initialize an empty output-text.
    output_text = ''

    # Initialize the number of tokens we have processed.
    count_tokens = 0

    # While we haven't sampled the special end-token for ' eeee'
    # and we haven't processed the max number of tokens.
    while token_int != token_end and count_tokens < max_tokens:
        # Update the input-sequence to the decoder
        # with the last token that was sampled.
        # In the first iteration this will set the
        # first element to the start-token.
        decoder_input_data[0, count_tokens] = token_int

        # Wrap the input-data in a dict for clarity and safety,
        # so we are sure we input the data in the right order.
        x_data = \
        {
            'decoder_initial_state': initial_state,
            'decoder_input': decoder_input_data
        }

        # Note that we input the entire sequence of tokens
        # to the decoder. This wastes a lot of computation
        # because we are only interested in the last input
        # and output. We could modify the code to return
        # the GRU-states when calling predict() and then
        # feeding these GRU-states as well the next time
        # we call predict(), but it would make the code
        # much more complicated.

        # Input this data to the decoder and get the predicted output.
        decoder_output = model_decoder.predict(x_data)
#         print(decoder_output)
        # Get the last predicted token as a one-hot encoded array.
        token_onehot = decoder_output[0, count_tokens, :]
        #print(token_onehot)
        
        # Convert to an integer-token.
        token_int = np.argmax(token_onehot)

        # Lookup the word corresponding to this integer-token.
        sampled_word = tokenizer_dest.token_to_word(token_int)

        # Append the word to the output-text.
        output_text += " " + sampled_word

        # Increment the token-counter.
        count_tokens += 1

    # Sequence of tokens output by the decoder.
    #output_tokens = decoder_input_data[0]
    
    # Print the input-text.
    print("Input text:")
    print(input_text)
    print()

    # Print the translated output-text.
    print("Translated text:")
    print(output_text)
    print()

    # Optionally print the true translated text.
    if true_output_text is not None:
        print("True output text:")
        print(true_output_text)
        print()

"""## Testing"""

idx = 3
translate(input_text=data_src[idx],
          true_output_text=data_target[idx])

idx = 15
translate(input_text=data_src[idx],
          true_output_text=data_target[idx])

idx = 335
translate(input_text=data_src[idx],
          true_output_text=data_target[idx])

idx = 245
translate(input_text=data_src[idx],
          true_output_text=data_target[idx])

idx = 265
translate(input_text=data_src[idx],
          true_output_text=data_target[idx])

idx = 11324
translate(input_text=data_src[idx],
          true_output_text=data_target[idx])

# model = load_model('bot150.h5', custom_objects={ 'loss':sparse_cross_entropy})

# modelfile = 'bot150.h5'
# model_new = model_from_json(open(modelfile).read())
# model_new.load_weights('bot150.h5')

input_text = input('Enter Text : ')

translate(input_text = input_text)


import pickle
with open('_tokenizer_src.pickle', 'wb') as handle:
    pickle.dump(tokenizer_src, handle, protocol=pickle.HIGHEST_PROTOCOL)
   
with open('tokenizer_dest.pickle', 'wb') as handle:
    pickle.dump(tokenizer_dest, handle, protocol=pickle.HIGHEST_PROTOCOL)

# with open('Chatbot_encoder_model.json', 'w', encoding='utf8') as f:
#     f.write(model_encoder.to_json())
# model_encoder.save_weights('chatbot_encoder_model_weights.h5')

# with open('Chatbot_decoder_model.json', 'w', encoding='utf8') as f:
#     f.write(model_encoder.to_json())
# model_encoder.save_weights('chatbot_decoder_model_weights.h5')

model_encoder.save('encoder_model.h5')
model_decoder.save('decoder_model.h5')

